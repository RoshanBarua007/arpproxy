import struct
from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib import ip
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import tcp
from ryu.lib.packet import arp
from ryu.lib.packet import icmp
from ryu.lib.packet import udp
from ryu.lib.packet import ipv4
from ryu.base import app_manager
from ryu.controller import mac_to_port
from ryu.controller import ofp_event
from ryu.ofproto import ofproto_v1_3
from ryu.ofproto import ofproto_v1_0
from ryu.ofproto import ether
from ryu.ofproto import inet
from ryu.lib.mac import haddr_to_bin
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.lib.packet import arp

s1_table = {'10.0.0.1':1}
s2_table = {'10.0.0.2':2}
arp_table = dict()
arp_table = {}
arp_table['10.0.0.1']='00:00:00:00:00:01'
arp_table['10.0.0.2']='00:00:00:00:00:02'



class Lab4(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(Lab4, self).__init__(*args, **kwargs)
        self.mac_to_port = {}

    def add_flow(self, datapath, match, actions):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]

        mod = datapath.ofproto_parser.OFPFlowMod(
            datapath=datapath, match=match, cookie=0,
            command=ofproto.OFPFC_ADD, idle_timeout=0, hard_timeout=0,
            priority=ofproto.OFP_DEFAULT_PRIORITY,
            flags=ofproto.OFPFF_SEND_FLOW_REM, instructions=inst)
        datapath.send_msg(mod)
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def _switch_features_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
	ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        actions = [datapath.ofproto_parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,max_len=ofproto.OFPCML_NO_BUFFER)]
	match = parser.OFPMatch()
	self.add_flow(datapath, match, actions)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})
        pkt = packet.Packet(msg.data)
        pkt_eth = pkt.get_protocol(ethernet.ethernet)  #eth packet
        pkt_arp = pkt.get_protocol(arp.arp)     #arp packet 
        pkt_tcp = pkt.get_protocol(tcp.tcp)     #tcp packet 
        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)  #ipv4 packet
        pkt_icmp = pkt.get_protocol(icmp.icmp)  #icmp packet

        in_port = msg.match['in_port'] #in_port

        self.logger.info("Packet in %s %s %s",dpid, in_port, pkt_eth)

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocol(ethernet.ethernet)
        dst = eth.dst
        src = eth.src
        dpid = datapath.id

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            # ignore lldp packet
            return

	if eth.ethertype ==ether_types.ETH_TYPE_ARP:
                a1 = pkt.get_protocol(arp.arp)
		
                #if a1.dst_ip in self.s1_table:
                mac_answer = arp_table[a1.dst_ip]
                #else:
                #    out_port = 3
                
		my_ethernet = ethernet.ethernet(ethertype = eth.ethertype, dst = src, src = dst)
		arp_reply = arp.arp(hwtype=1, proto=0x0800, hlen=6, plen=4, opcode=2, src_mac=mac_answer, dst_mac = a1.src_mac, src_ip=a1.dst_ip, dst_ip=a1.src_ip)
		#self.logger("Testing - ARP reply: %s" % arp_reply)
		my_packet = packet.Packet()
		my_packet.add_protocol(my_ethernet)
		my_packet.add_protocol(arp_reply)
		my_packet.serialize()
		parser = datapath.ofproto_parser
		actions = [parser.OFPActionOutput(in_port)]
                #match = parser.OFPMatch(eth_type=2054,arp_tpa=a1.dst_ip)
                #self.add_flow(datapath, match, actions)
		out= parser.OFPPacketOut(datapath=datapath, buffer_id =ofproto.OFP_NO_BUFFER, in_port = ofproto.OFPP_CONTROLLER, 
                actions= actions, data = my_packet.data)
 		datapath.send_msg(out)
		
        
        if dpid == 1:
            if pkt_arp:
                match = parser.OFPMatch(eth_type = 2054,ipv4_src=pkt_arp.src_ip,ipv4_dst=pkt_arp.dst_ip,in_port=in_port)
                if in_port==1:
			port=2
                actions = [parser.OFPActionOutput(port)]
                self.add_flow(datapath, match, actions)

            if pkt_ipv4:
                match = parser.OFPMatch(eth_type = 2054,ipv4_src=pkt_ipv4.src,ipv4_dst=pkt_ipv4.dst,in_port=in_port)
                if in_port==1:
			port=2
                actions = [parser.OFPActionOutput(2)]
                self.add_flow(datapath,  match, actions)


         





                
                #SWITCH 2

        if dpid == 2:
            if pkt_arp:
                match = parser.OFPMatch(eth_type = 2054,ipv4_src=pkt_arp.src_ip,ipv4_dst=pkt_arp.dst_ip,in_port=in_port)
                if in_port==2:
			port=1
                actions = [parser.OFPActionOutput(port)]
                self.add_flow(datapath, match, actions)

            if pkt_ipv4:
                match = parser.OFPMatch(eth_type = 2054,ipv4_src=pkt_ipv4.src,ipv4_dst=pkt_ipv4.dst,in_port=in_port)
                if in_port==2:
			port=1
                actions = [parser.OFPActionOutput(port)]
                self.add_flow(datapath, match, actions)

                
           
                



